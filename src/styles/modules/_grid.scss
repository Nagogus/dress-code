//  ---------------------------------------------------------------------------
//
//  Defines the grid and generates helper classes.
//
//  ---------------------------------------------------------------------------


//  = BUILD GRID HELPER CLASSES
//  ---------------------------------------------------------------------------

$layouts: $dc-tiny $dc-small $dc-medium $dc-large $dc-huge $dc-giant $dc-monstrous;
$breakpoints: $dc-tiny-width $dc-small-width $dc-medium-width $dc-large-width $dc-huge-width $dc-giant-width $dc-monstrous-width;
$breakpoint-names: "tiny" "small" "medium" "large" "huge" "giant" "monstrous";

.dc-span--demo {
    margin-bottom: $dc-space50;
    //padding: $dc-space50;
    //border: 1px solid rgba($dc-orange40, .6);
    background: rgba($dc-orange60, .4);
    color: $dc-orange30;
    font-size: $dc-font100;
    line-height: 1.5;
}

.dc-grid {
    // Set the default paddings for each size
    padding: $dc-space50;

    @include breakpoint($dc-small-width) {
        padding: $dc-space100;
    }

    @include breakpoint($dc-giant-width) {
        padding: $dc-space150;
    }

    @include breakpoint($dc-monstrous-width) {
        padding: $dc-space200;
    }

    // For each breakpoint
    @for $j from 1 through length($breakpoints) {
        // Check if there is another breakpoint after
        // the current one. If yes, limit the media query.
        @if($j < length($breakpoints)) {
            // E. g. "80em 99.9em"
            $mq: nth($breakpoints, $j) nth($breakpoints, $j + 1) - .1;
        } @else {
            // E. g. "100em"
            $mq: nth($breakpoints, $j);
        }

        // Add the media query
        @include breakpoint(nth($breakpoints, $j)) {
            // Set the layout on the grid itself
            //@include container(nth($layouts, $j));

            // For each column size (1-12)
            @for $i from 1 through 12 {
                // Generate classes like .dc-large

                .dc-span#{$i} {
                    @include span($i of nth($layouts, $j));
                }

            }

            .dc-last {
                // Remove the margin from the default last column.
                // It has to be here in the cascade to override columns bur
                // be overridden by size specific classes.
                margin-right: 0;
            }

            // For each column size (1-12)
            @for $i from 1 through 12 {
                // Generate classes like .dc-large-span4

                .dc-#{nth($breakpoint-names, $j)}-span#{$i} {
                    @include span($i of nth($layouts, $j));
                }
            }

        }

        // Add the media query
        @include breakpoint($mq) {

            .dc-#{nth($breakpoint-names, $j)}-hide {
                display: none;
            }


            // Generate classes for last columns like .dc-large-last
            .dc-#{nth($breakpoint-names, $j)}-last {
                // Reset last column to prevent line break
                //@include last;
                margin-right: 0;

                // // The first element of a new row must clear floats
                // // otherwise rows could get messed up when columns
                // // do not have the same height.
                + [class*='-span'] {
                    clear: both;
                }
            }

            .dc-#{nth($breakpoint-names, $j)}-hide {
                display: none;
            }

        }
    }
}
